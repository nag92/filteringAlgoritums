'''
Created on Jul 3, 2015

@author: nathaniel
'''

import matplotlib as mpl
import pandas as pd
import matplotlib.pyplot as plt
import makeGraph
import outlier_fitler
import kalman_filter
import numpy as np
import random


mpl.rc("savefig", dpi=150)
#plt.ion()


X = np.array([[0.0], [0.0], [0.1], [0.1]])
P = np.diag((0.01, 0.01, 0.01, 0.01))
Q = np.eye(X.shape[0]) 
B = np.eye(X.shape[0]) 
U = np.zeros((X.shape[0],1))
Y = np.array([[X[0,0] + abs(np.random.randn(1)[0])], [X[1,0] + abs(np.random.randn(1)[0])]]) 
H = np.array([[1, 0, 0, 0], [0, 1, 0, 0]]) 
R = np.eye(Y.shape[0]) 
'''
print 'x'
print X
print 'P'
print P
print 'Q'
print Q
print 'B'
print B
print 'u'
print U
print 'y'
print Y
print 'h'
print H
print 'r'
print R
'''
if __name__ == '__main__':
    df = pd.DataFrame.from_csv('/home/nathaniel/Documents/pythonWorkSpace/outlier_filter/usbl_data.csv', index_col=None)
    #print df
    my_x = df['x'].values.tolist()
    my_y= df['y'].values.tolist()
    my_z =  df['z'].values.tolist()
    my_depth =  df['depth'].values.tolist()
   

    plt, ax = makeGraph.makeGraph()
    
    dt = .001

    pos = np.matrix([[0],#v_x
                     [0],#v_y
                     [0],#v_z
                     [0],#x
                     [0],#y
                     [0]])#z
    
    A = np.matrix([[1,  0,  0,  0, 0, 0,],
                   [0,  1,  0,  0, 0, 0,],
                   [0,  0,  1,  0, 0, 0,],
                   [dt, 0,  0,  1, 0, 0,],
                   [0,  dt, 0,  0, 1, 0,],
                   [0,  0,  dt, 0, 0, 1, ]])
    B = np.matrix([0])
    C = np.eye(pos.shape[0])
    Q = np.eye(pos.shape[0])*30
    R = np.eye(pos.shape[0])*20
    P = np.eye(pos.shape[0])
    U = np.matrix( [[0]])
    Z = np.matrix( [[0],[0],[0],[0],[0],[0] ])
    
    kalman = kalman_filter.kalman_filter(A,B,C,Q,P,R,pos)
    #plt.ion()
    plt.show()
    for i in xrange(len(my_x)/8):
        print i
        if(outlier_fitler.outlier(my_x[i], my_y[i],my_depth[i] )):
            ax.scatter(my_x[i], my_y[i],my_depth[i],color='b')
            Z = np.matrix( [[0],[0],[0],[my_x[i]],[my_y[i]],[my_depth[i]] ])
            kalman.move(U,Z)
            pos = kalman.getState()
            ax.scatter(pos[3], pos[4],pos[5],color='g')
        else:
            ax.scatter(my_x[i], my_y[i],my_depth[i],color='r')
    
        
        
        
        #print pos
        #print 'x' +str(pos[3])
        #print 'y' +str(pos[4])
        #print 'z' +str(pos[5])
        plt.draw()


    plt.ioff()
    plt.show()






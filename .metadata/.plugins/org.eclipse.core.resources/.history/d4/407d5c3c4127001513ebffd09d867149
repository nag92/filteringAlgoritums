'''
Created on Jul 10, 2015

@author: nathaniel
'''

 plt, ax = makeGraph.makeGraph()
    
    dt = 1

    pos = np.matrix([[0],#v_x
                     [0],#v_y
                     [0],#v_z
                     [0],#x
                     [0],#y
                     [0]])#z
    
    A = np.matrix([[1,  0,  0,  0, 0, 0,],
                   [0,  1,  0,  0, 0, 0,],
                   [0,  0,  1,  0, 0, 0,],
                   [dt, 0,  0,  1, 0, 0,],
                   [0,  dt, 0,  0, 1, 0,],
                   [0,  0,  dt, 0, 0, 1, ]])
    B = np.matrix([0])
    C = np.eye(pos.shape[0])
    Q = np.eye(pos.shape[0])*.2
    R = np.eye(pos.shape[0])*.2
    P = np.eye(pos.shape[0])
    U = np.matrix( [[0]])
    Z = np.matrix( [[0],[0],[0],[0],[0],[0] ])
    
    kalman = kalman_filter.kalman_filter(A,B,C,Q,P,R,pos)
    #plt.ion()
    plt.show()
    for i in xrange(len(my_x)):
        print i
        if(outlier_fitler.outlier(my_x[i], my_y[i],my_depth[i] )):
            ax.scatter(my_x[i], my_y[i],-my_depth[i],color='b')
            Z = np.matrix( [[0],[0],[0],[my_x[i]],[my_y[i]],[my_depth[i]] ])
            kalman.move(U,Z)
            pos = kalman.getState()
            ax.scatter(pos[3], pos[4],-pos[5],color='g')
        else:
            ax.scatter(my_x[i], my_y[i],-my_depth[i],color='r')
    
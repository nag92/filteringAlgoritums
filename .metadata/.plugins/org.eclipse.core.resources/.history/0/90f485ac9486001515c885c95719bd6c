'''
Created on Nov 7, 2015

@author: nathaniel
'''

import numpy as np
from cmath import sqrt
class poly_filter(object):
	'''
	classdocs
	'''


	def __init__(self,window_size,degree):
		'''
		Constructor
		'''
		self.window = window_size
		self.degree = degree
		self. y = []
		self.x = []
		self.count = 0
		
			
			
	def update(self, data):
		
		self.time = 0
		self.old_MSE = 0 
		self.count = self.count + 1
		self.x.append(self.count)
		self.y.append(data)
		weights = np.diag( [1 for _ in xrange(self.window)] )
		thresh = 2.5
		isGood = True
		if len(self.x) >= self.window:
			resid = self.regress(self.y,self.x,weights )
			mse = sum(resid**2)/ len(resid);
			
			if abs( resid[-1]/np.sqrt( mse )) > 2.5 :
				isGood = False
			self.x.pop()
			self.y.pop()
		return isGood
			
	
	def getCoef(self, y,x,weights):
		
		my_x = self.make_x(x)	
		print my_x
		print ""
		print  np.transpose(np.transpose(zip(*my_x)))
		print ""
		print weights
		temp1 = np.dot( np.transpose(np.transpose(zip(*my_x))) , weights )  
		
		temp2 = np.dot(temp1, my_x) 

		temp3 = np.linalg.inv(np.vstack(np.vstack(temp2)))
		print ""
		print temp3
		temp4 = np.dot(temp3,weights)
		temp5 = np.dot(temp4, y)
		
		return temp5
		
	def make_x(self,  data):
		
		m = []
		for x in data:
			temp = []
			for i in xrange(self.degree+1):
				temp.append(x**i)
		#print temp
			m.append(temp)
	#print np.transpose(zip(*m))
		m = (zip(*m))
		return  np.transpose(np.transpose(zip(*m)))
		
			
	def get_residuals(self,y,x, coef ):
		
		ybar = np.polyval(coef,x)
		r = y-ybar
	
		return r
		
	
	def bisquare(self, resid ):
		
		MAD = sum(abs(resid - np.mean(resid)))/len(resid);
		k = (4.685*MAD)/.6745
		w = []
		
		for r in resid:
			if abs(resid) <= k:
				w.append(  (1 - (r/k)**2 )**2  )
			else:
				w.append(0)
		return w
			
	def regress(self,y,x,w):
		
		error = .00001
		coef = self.getCoef(y, x, w)
		resid = self.get_residuals(y, x, coef)
		mse = sum(resid**2)/ len(resid);
		
		if abs( self.old_MSE - mse ) < error or self.time == 10:
			self.old_MSE = mse
			self.time = self.time + 1
			new_w = np.diag( self.bisquare(resid) )
			self.regress(y,x,new_w )
		else:
			return resid
		
	
		
		
		
		
	
	
		
		
		
		